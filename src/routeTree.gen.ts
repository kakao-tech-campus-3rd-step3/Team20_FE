/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as MapRouteImport } from './pages/map'
import { Route as IndexRouteImport } from './pages/index'
import { Route as MapContentIdRouteImport } from './pages/map.$contentId'
import { Route as ContentIdRouteImport } from './pages/content.$id'

const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MapContentIdRoute = MapContentIdRouteImport.update({
  id: '/$contentId',
  path: '/$contentId',
  getParentRoute: () => MapRoute,
} as any)
const ContentIdRoute = ContentIdRouteImport.update({
  id: '/content/$id',
  path: '/content/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/map': typeof MapRouteWithChildren
  '/content/$id': typeof ContentIdRoute
  '/map/$contentId': typeof MapContentIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/map': typeof MapRouteWithChildren
  '/content/$id': typeof ContentIdRoute
  '/map/$contentId': typeof MapContentIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/map': typeof MapRouteWithChildren
  '/content/$id': typeof ContentIdRoute
  '/map/$contentId': typeof MapContentIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/map' | '/content/$id' | '/map/$contentId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/map' | '/content/$id' | '/map/$contentId'
  id: '__root__' | '/' | '/map' | '/content/$id' | '/map/$contentId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapRoute: typeof MapRouteWithChildren
  ContentIdRoute: typeof ContentIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/$contentId': {
      id: '/map/$contentId'
      path: '/$contentId'
      fullPath: '/map/$contentId'
      preLoaderRoute: typeof MapContentIdRouteImport
      parentRoute: typeof MapRoute
    }
    '/content/$id': {
      id: '/content/$id'
      path: '/content/$id'
      fullPath: '/content/$id'
      preLoaderRoute: typeof ContentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface MapRouteChildren {
  MapContentIdRoute: typeof MapContentIdRoute
}

const MapRouteChildren: MapRouteChildren = {
  MapContentIdRoute: MapContentIdRoute,
}

const MapRouteWithChildren = MapRoute._addFileChildren(MapRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapRoute: MapRouteWithChildren,
  ContentIdRoute: ContentIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
